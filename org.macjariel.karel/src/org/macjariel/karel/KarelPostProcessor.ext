import ecore;
import karel;

/// Process all EClasses
process(xtext::GeneratedMetamodel this) :
	ePackage.eClassifiers.typeSelect(EClass).process()
;

process(EClass this) :
	/// Add Statement annotation to all EClasses that are subtypes of Statement
	/// or InitCommand EClasses
	findEClass(this.ePackage, "Statement").isSuperTypeOf(this) ||
	findEClass(this.ePackage, "InitCommand").isSuperTypeOf(this) ? 
		setType("Statement") : null ->
	
	/// Add others annotations based on EClass names.
	switch (this.name) {
		case "UserDefinedCommandStatement": (setType("SubrutineCall"))
		case "UserDefinedCommand": (setType("SubrutineDefinition"))
		default: null
	}
;


/// TODO: The things below should go to separate file that will reside probably in org.macjariel.dsl.debugger project 

private setType(EClass class, String type):
	hasAnnotation(class) ? updateAnnotation(class, type) : createAnnotation(class, type)
;
	 
create EAnnotation createAnnotation(EClass class, String type):
	let detail = new EStringToStringMapEntry :
	setSource("http://www.macjariel.org/DSLDebugger") ->
	detail.setKey("type") ->
	detail.setValue(type) ->
	this.details.add(detail) -> 
	class.eAnnotations.add(this)
;
	
private updateAnnotation(EClass class, String type):
	let oldValue = getAnnotation(class).details.selectFirst(e|e.key == "type").value :
	getAnnotation(class).details.selectFirst(e|e.key == "type").setValue(oldValue + " " + type) ->
	true
;

/// Returns whether there is the annotation attached to the EClass
private boolean hasAnnotation(EClass class) :
	getAnnotation(class) != null;

/// Returns the annotation attached to the EClass
private EAnnotation getAnnotation(EClass class) :
	class.getEAnnotation("http://www.macjariel.org/DSLDebugger");

/// Helper query that returns EClass for given EPackage and EClass name.
private EClass findEClass(EPackage pkg, String name) :
	pkg.eClassifiers.typeSelect(EClass).selectFirst(e|e.name == name);
	