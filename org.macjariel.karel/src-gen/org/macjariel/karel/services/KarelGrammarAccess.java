/*
* generated by Xtext
*/

package org.macjariel.karel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class KarelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINPROGRAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitSectionInitSectionParserRuleCall_1_0 = (RuleCall)cInitSectionAssignment_1.eContents().get(0);
		private final Assignment cUserDefinedCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUserDefinedCommandsUserDefinedCommandParserRuleCall_2_0 = (RuleCall)cUserDefinedCommandsAssignment_2.eContents().get(0);
		private final Assignment cMainAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainMainParserRuleCall_3_0 = (RuleCall)cMainAssignment_3.eContents().get(0);
		private final Keyword cENDPROGRAMKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program:
		//	"BEGIN-PROGRAM" initSection=InitSection? userDefinedCommands+=UserDefinedCommand* main=Main "END-PROGRAM";
		public ParserRule getRule() { return rule; }

		//"BEGIN-PROGRAM" initSection=InitSection? userDefinedCommands+=UserDefinedCommand* main=Main "END-PROGRAM"
		public Group getGroup() { return cGroup; }

		//"BEGIN-PROGRAM"
		public Keyword getBEGINPROGRAMKeyword_0() { return cBEGINPROGRAMKeyword_0; }

		//initSection=InitSection?
		public Assignment getInitSectionAssignment_1() { return cInitSectionAssignment_1; }

		//InitSection
		public RuleCall getInitSectionInitSectionParserRuleCall_1_0() { return cInitSectionInitSectionParserRuleCall_1_0; }

		//userDefinedCommands+=UserDefinedCommand*
		public Assignment getUserDefinedCommandsAssignment_2() { return cUserDefinedCommandsAssignment_2; }

		//UserDefinedCommand
		public RuleCall getUserDefinedCommandsUserDefinedCommandParserRuleCall_2_0() { return cUserDefinedCommandsUserDefinedCommandParserRuleCall_2_0; }

		//main=Main
		public Assignment getMainAssignment_3() { return cMainAssignment_3; }

		//Main
		public RuleCall getMainMainParserRuleCall_3_0() { return cMainMainParserRuleCall_3_0; }

		//"END-PROGRAM"
		public Keyword getENDPROGRAMKeyword_4() { return cENDPROGRAMKeyword_4; }
	}

	public class InitSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGININITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitCommandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitCommandsInitCommandParserRuleCall_1_0 = (RuleCall)cInitCommandsAssignment_1.eContents().get(0);
		private final Keyword cENDINITKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InitSection:
		//	"BEGIN-INIT" initCommands+=InitCommand+ "END-INIT";
		public ParserRule getRule() { return rule; }

		//"BEGIN-INIT" initCommands+=InitCommand+ "END-INIT"
		public Group getGroup() { return cGroup; }

		//"BEGIN-INIT"
		public Keyword getBEGININITKeyword_0() { return cBEGININITKeyword_0; }

		//initCommands+=InitCommand+
		public Assignment getInitCommandsAssignment_1() { return cInitCommandsAssignment_1; }

		//InitCommand
		public RuleCall getInitCommandsInitCommandParserRuleCall_1_0() { return cInitCommandsInitCommandParserRuleCall_1_0; }

		//"END-INIT"
		public Keyword getENDINITKeyword_2() { return cENDINITKeyword_2; }
	}

	public class InitCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInitPositionCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitHeadingCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInitBoardSizeCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InitCommand:
		//	InitPositionCommand | InitHeadingCommand | InitBoardSizeCommand;
		public ParserRule getRule() { return rule; }

		//InitPositionCommand | InitHeadingCommand | InitBoardSizeCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//InitPositionCommand
		public RuleCall getInitPositionCommandParserRuleCall_0() { return cInitPositionCommandParserRuleCall_0; }

		//InitHeadingCommand
		public RuleCall getInitHeadingCommandParserRuleCall_1() { return cInitHeadingCommandParserRuleCall_1; }

		//InitBoardSizeCommand
		public RuleCall getInitBoardSizeCommandParserRuleCall_2() { return cInitBoardSizeCommandParserRuleCall_2; }
	}

	public class InitPositionCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitPositionCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InitPositionCommand:
		//	"position" x=INT "," y=INT ";";
		public ParserRule getRule() { return rule; }

		//"position" x=INT "," y=INT ";"
		public Group getGroup() { return cGroup; }

		//"position"
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }

		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }

		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }

		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class InitHeadingCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitHeadingCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadingHeadingKindEnumRuleCall_1_0 = (RuleCall)cHeadingAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InitHeadingCommand:
		//	"heading" heading=HeadingKind ";";
		public ParserRule getRule() { return rule; }

		//"heading" heading=HeadingKind ";"
		public Group getGroup() { return cGroup; }

		//"heading"
		public Keyword getHeadingKeyword_0() { return cHeadingKeyword_0; }

		//heading=HeadingKind
		public Assignment getHeadingAssignment_1() { return cHeadingAssignment_1; }

		//HeadingKind
		public RuleCall getHeadingHeadingKindEnumRuleCall_1_0() { return cHeadingHeadingKindEnumRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class InitBoardSizeCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitBoardSizeCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoardSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeightINTTerminalRuleCall_3_0 = (RuleCall)cHeightAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InitBoardSizeCommand:
		//	"boardSize" width=INT "," height=INT ";";
		public ParserRule getRule() { return rule; }

		//"boardSize" width=INT "," height=INT ";"
		public Group getGroup() { return cGroup; }

		//"boardSize"
		public Keyword getBoardSizeKeyword_0() { return cBoardSizeKeyword_0; }

		//width=INT
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0() { return cWidthINTTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//height=INT
		public Assignment getHeightAssignment_3() { return cHeightAssignment_3; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_0() { return cHeightINTTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class UserDefinedCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserDefinedCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDocumentationCommentParserRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Keyword cDEFINECOMMANDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cASKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBEGINKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cENDKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UserDefinedCommand:
		//	doc=DocumentationComment? "DEFINE COMMAND" name=ID "AS" "BEGIN" statements+=Statement* "END";
		public ParserRule getRule() { return rule; }

		//doc=DocumentationComment? "DEFINE COMMAND" name=ID "AS" "BEGIN" statements+=Statement* "END"
		public Group getGroup() { return cGroup; }

		//doc=DocumentationComment?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DocumentationComment
		public RuleCall getDocDocumentationCommentParserRuleCall_0_0() { return cDocDocumentationCommentParserRuleCall_0_0; }

		//"DEFINE COMMAND"
		public Keyword getDEFINECOMMANDKeyword_1() { return cDEFINECOMMANDKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"AS"
		public Keyword getASKeyword_3() { return cASKeyword_3; }

		//"BEGIN"
		public Keyword getBEGINKeyword_4() { return cBEGINKeyword_4; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }

		//"END"
		public Keyword getENDKeyword_6() { return cENDKeyword_6; }
	}

	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBEGINMAINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cENDMAINKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Main:
		//	{Main} "BEGIN-MAIN" statements+=Statement* "END-MAIN";
		public ParserRule getRule() { return rule; }

		//{Main} "BEGIN-MAIN" statements+=Statement* "END-MAIN"
		public Group getGroup() { return cGroup; }

		//{Main}
		public Action getMainAction_0() { return cMainAction_0; }

		//"BEGIN-MAIN"
		public Keyword getBEGINMAINKeyword_1() { return cBEGINMAINKeyword_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"END-MAIN"
		public Keyword getENDMAINKeyword_3() { return cENDMAINKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIterateStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommandStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUserDefinedCommandStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement:
		//	IfStatement | IterateStatement | WhileStatement | CommandStatement | UserDefinedCommandStatement;
		public ParserRule getRule() { return rule; }

		//IfStatement | IterateStatement | WhileStatement | CommandStatement | UserDefinedCommandStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }

		//IterateStatement
		public RuleCall getIterateStatementParserRuleCall_1() { return cIterateStatementParserRuleCall_1; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_2() { return cWhileStatementParserRuleCall_2; }

		//CommandStatement
		public RuleCall getCommandStatementParserRuleCall_3() { return cCommandStatementParserRuleCall_3; }

		//UserDefinedCommandStatement
		public RuleCall getUserDefinedCommandStatementParserRuleCall_4() { return cUserDefinedCommandStatementParserRuleCall_4; }
	}

	public class UserDefinedCommandStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserDefinedCommandStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCommandUserDefinedCommandCrossReference_0_0 = (CrossReference)cCommandAssignment_0.eContents().get(0);
		private final RuleCall cCommandUserDefinedCommandIDTerminalRuleCall_0_0_1 = (RuleCall)cCommandUserDefinedCommandCrossReference_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UserDefinedCommandStatement:
		//	command=[UserDefinedCommand] ";";
		public ParserRule getRule() { return rule; }

		//command=[UserDefinedCommand] ";"
		public Group getGroup() { return cGroup; }

		//command=[UserDefinedCommand]
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }

		//[UserDefinedCommand]
		public CrossReference getCommandUserDefinedCommandCrossReference_0_0() { return cCommandUserDefinedCommandCrossReference_0_0; }

		//ID
		public RuleCall getCommandUserDefinedCommandIDTerminalRuleCall_0_0_1() { return cCommandUserDefinedCommandIDTerminalRuleCall_0_0_1; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionExprParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cELSEKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElseStatementsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cElseStatementsStatementParserRuleCall_7_2_0 = (RuleCall)cElseStatementsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//IfStatement:
		//	"IF" "(" condition=ConditionExpr ")" "{" statements+=Statement* "}" ("ELSE" "{" elseStatements+=Statement* "}")?;
		public ParserRule getRule() { return rule; }

		//"IF" "(" condition=ConditionExpr ")" "{" statements+=Statement* "}" ("ELSE" "{" elseStatements+=Statement* "}")?
		public Group getGroup() { return cGroup; }

		//"IF"
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=ConditionExpr
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//ConditionExpr
		public RuleCall getConditionConditionExprParserRuleCall_2_0() { return cConditionConditionExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//("ELSE" "{" elseStatements+=Statement* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"ELSE"
		public Keyword getELSEKeyword_7_0() { return cELSEKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//elseStatements+=Statement*
		public Assignment getElseStatementsAssignment_7_2() { return cElseStatementsAssignment_7_2; }

		//Statement
		public RuleCall getElseStatementsStatementParserRuleCall_7_2_0() { return cElseStatementsStatementParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class IterateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IterateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cITERATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimesINTTerminalRuleCall_1_0 = (RuleCall)cTimesAssignment_1.eContents().get(0);
		private final Keyword cTIMESKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IterateStatement:
		//	"ITERATE" times=INT "TIMES" "{" statements+=Statement "}";
		public ParserRule getRule() { return rule; }

		//"ITERATE" times=INT "TIMES" "{" statements+=Statement "}"
		public Group getGroup() { return cGroup; }

		//"ITERATE"
		public Keyword getITERATEKeyword_0() { return cITERATEKeyword_0; }

		//times=INT
		public Assignment getTimesAssignment_1() { return cTimesAssignment_1; }

		//INT
		public RuleCall getTimesINTTerminalRuleCall_1_0() { return cTimesINTTerminalRuleCall_1_0; }

		//"TIMES"
		public Keyword getTIMESKeyword_2() { return cTIMESKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//statements+=Statement
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHILEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionExprParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WhileStatement:
		//	"WHILE" "(" condition=ConditionExpr ")" "{" statements+=Statement "}";
		public ParserRule getRule() { return rule; }

		//"WHILE" "(" condition=ConditionExpr ")" "{" statements+=Statement "}"
		public Group getGroup() { return cGroup; }

		//"WHILE"
		public Keyword getWHILEKeyword_0() { return cWHILEKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=ConditionExpr
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//ConditionExpr
		public RuleCall getConditionConditionExprParserRuleCall_2_0() { return cConditionConditionExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//statements+=Statement
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DocumentationCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DocumentationComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DocumentationComment:
		//	"@(" text=STRING ")";
		public ParserRule getRule() { return rule; }

		//"@(" text=STRING ")"
		public Group getGroup() { return cGroup; }

		//"@("
		public Keyword getCommercialAtLeftParenthesisKeyword_0() { return cCommercialAtLeftParenthesisKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class CommandStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindCommandKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CommandStatement:
		//	kind=CommandKind ";";
		public ParserRule getRule() { return rule; }

		//kind=CommandKind ";"
		public Group getGroup() { return cGroup; }

		//kind=CommandKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }

		//CommandKind
		public RuleCall getKindCommandKindEnumRuleCall_0_0() { return cKindCommandKindEnumRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ConditionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegationExclamationMarkKeyword_0_0 = (Keyword)cNegationAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprConditionKindEnumRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ConditionExpr:
		//	negation?="!" expr=ConditionKind;
		public ParserRule getRule() { return rule; }

		//negation?="!" expr=ConditionKind
		public Group getGroup() { return cGroup; }

		//negation?="!"
		public Assignment getNegationAssignment_0() { return cNegationAssignment_0; }

		//"!"
		public Keyword getNegationExclamationMarkKeyword_0_0() { return cNegationExclamationMarkKeyword_0_0; }

		//expr=ConditionKind
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//ConditionKind
		public RuleCall getExprConditionKindEnumRuleCall_1_0() { return cExprConditionKindEnumRuleCall_1_0; }
	}
	
	
	public class HeadingKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "HeadingKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORTHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORTHNORTHKeyword_0_0 = (Keyword)cNORTHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSOUTHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSOUTHSOUTHKeyword_1_0 = (Keyword)cSOUTHEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWESTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWESTWESTKeyword_2_0 = (Keyword)cWESTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEASTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEASTEASTKeyword_3_0 = (Keyword)cEASTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum HeadingKind:
		//	NORTH | SOUTH | WEST | EAST;
		public EnumRule getRule() { return rule; }

		//NORTH | SOUTH | WEST | EAST
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORTH
		public EnumLiteralDeclaration getNORTHEnumLiteralDeclaration_0() { return cNORTHEnumLiteralDeclaration_0; }

		//"NORTH"
		public Keyword getNORTHNORTHKeyword_0_0() { return cNORTHNORTHKeyword_0_0; }

		//SOUTH
		public EnumLiteralDeclaration getSOUTHEnumLiteralDeclaration_1() { return cSOUTHEnumLiteralDeclaration_1; }

		//"SOUTH"
		public Keyword getSOUTHSOUTHKeyword_1_0() { return cSOUTHSOUTHKeyword_1_0; }

		//WEST
		public EnumLiteralDeclaration getWESTEnumLiteralDeclaration_2() { return cWESTEnumLiteralDeclaration_2; }

		//"WEST"
		public Keyword getWESTWESTKeyword_2_0() { return cWESTWESTKeyword_2_0; }

		//EAST
		public EnumLiteralDeclaration getEASTEnumLiteralDeclaration_3() { return cEASTEnumLiteralDeclaration_3; }

		//"EAST"
		public Keyword getEASTEASTKeyword_3_0() { return cEASTEASTKeyword_3_0; }
	}

	public class CommandKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CommandKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMOVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMOVEMoveKeyword_0_0 = (Keyword)cMOVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTURNLEFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTURNLEFTTurnKeyword_1_0 = (Keyword)cTURNLEFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTURNONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTURNONTurnOnKeyword_2_0 = (Keyword)cTURNONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTURNOFFEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTURNOFFTurnOffKeyword_3_0 = (Keyword)cTURNOFFEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPUTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPUTPutKeyword_4_0 = (Keyword)cPUTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGETEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGETGetKeyword_5_0 = (Keyword)cGETEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CommandKind:
		//	MOVE="move" | TURNLEFT="turn" | TURNON="turnOn" | TURNOFF="turnOff" | PUT="put" | GET="get";
		public EnumRule getRule() { return rule; }

		//MOVE="move" | TURNLEFT="turn" | TURNON="turnOn" | TURNOFF="turnOff" | PUT="put" | GET="get"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MOVE="move"
		public EnumLiteralDeclaration getMOVEEnumLiteralDeclaration_0() { return cMOVEEnumLiteralDeclaration_0; }

		//"move"
		public Keyword getMOVEMoveKeyword_0_0() { return cMOVEMoveKeyword_0_0; }

		//TURNLEFT="turn"
		public EnumLiteralDeclaration getTURNLEFTEnumLiteralDeclaration_1() { return cTURNLEFTEnumLiteralDeclaration_1; }

		//"turn"
		public Keyword getTURNLEFTTurnKeyword_1_0() { return cTURNLEFTTurnKeyword_1_0; }

		//TURNON="turnOn"
		public EnumLiteralDeclaration getTURNONEnumLiteralDeclaration_2() { return cTURNONEnumLiteralDeclaration_2; }

		//"turnOn"
		public Keyword getTURNONTurnOnKeyword_2_0() { return cTURNONTurnOnKeyword_2_0; }

		//TURNOFF="turnOff"
		public EnumLiteralDeclaration getTURNOFFEnumLiteralDeclaration_3() { return cTURNOFFEnumLiteralDeclaration_3; }

		//"turnOff"
		public Keyword getTURNOFFTurnOffKeyword_3_0() { return cTURNOFFTurnOffKeyword_3_0; }

		//PUT="put"
		public EnumLiteralDeclaration getPUTEnumLiteralDeclaration_4() { return cPUTEnumLiteralDeclaration_4; }

		//"put"
		public Keyword getPUTPutKeyword_4_0() { return cPUTPutKeyword_4_0; }

		//GET="get"
		public EnumLiteralDeclaration getGETEnumLiteralDeclaration_5() { return cGETEnumLiteralDeclaration_5; }

		//"get"
		public Keyword getGETGetKeyword_5_0() { return cGETGetKeyword_5_0; }
	}

	public class ConditionKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWALL_AHEADEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWALL_AHEADWALL_AHEADKeyword_0_0 = (Keyword)cWALL_AHEADEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMARKED_PLACEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMARKED_PLACEMARKED_PLACEKeyword_1_0 = (Keyword)cMARKED_PLACEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConditionKind:
		//	WALL_AHEAD | MARKED_PLACE;
		public EnumRule getRule() { return rule; }

		//WALL_AHEAD | MARKED_PLACE
		public Alternatives getAlternatives() { return cAlternatives; }

		//WALL_AHEAD
		public EnumLiteralDeclaration getWALL_AHEADEnumLiteralDeclaration_0() { return cWALL_AHEADEnumLiteralDeclaration_0; }

		//"WALL_AHEAD"
		public Keyword getWALL_AHEADWALL_AHEADKeyword_0_0() { return cWALL_AHEADWALL_AHEADKeyword_0_0; }

		//MARKED_PLACE
		public EnumLiteralDeclaration getMARKED_PLACEEnumLiteralDeclaration_1() { return cMARKED_PLACEEnumLiteralDeclaration_1; }

		//"MARKED_PLACE"
		public Keyword getMARKED_PLACEMARKED_PLACEKeyword_1_0() { return cMARKED_PLACEMARKED_PLACEKeyword_1_0; }
	}
	
	private ProgramElements pProgram;
	private InitSectionElements pInitSection;
	private InitCommandElements pInitCommand;
	private InitPositionCommandElements pInitPositionCommand;
	private InitHeadingCommandElements pInitHeadingCommand;
	private InitBoardSizeCommandElements pInitBoardSizeCommand;
	private HeadingKindElements unknownRuleHeadingKind;
	private UserDefinedCommandElements pUserDefinedCommand;
	private MainElements pMain;
	private StatementElements pStatement;
	private UserDefinedCommandStatementElements pUserDefinedCommandStatement;
	private IfStatementElements pIfStatement;
	private IterateStatementElements pIterateStatement;
	private WhileStatementElements pWhileStatement;
	private DocumentationCommentElements pDocumentationComment;
	private CommandStatementElements pCommandStatement;
	private CommandKindElements unknownRuleCommandKind;
	private ConditionExprElements pConditionExpr;
	private ConditionKindElements unknownRuleConditionKind;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public KarelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	"BEGIN-PROGRAM" initSection=InitSection? userDefinedCommands+=UserDefinedCommand* main=Main "END-PROGRAM";
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//InitSection:
	//	"BEGIN-INIT" initCommands+=InitCommand+ "END-INIT";
	public InitSectionElements getInitSectionAccess() {
		return (pInitSection != null) ? pInitSection : (pInitSection = new InitSectionElements());
	}
	
	public ParserRule getInitSectionRule() {
		return getInitSectionAccess().getRule();
	}

	//InitCommand:
	//	InitPositionCommand | InitHeadingCommand | InitBoardSizeCommand;
	public InitCommandElements getInitCommandAccess() {
		return (pInitCommand != null) ? pInitCommand : (pInitCommand = new InitCommandElements());
	}
	
	public ParserRule getInitCommandRule() {
		return getInitCommandAccess().getRule();
	}

	//InitPositionCommand:
	//	"position" x=INT "," y=INT ";";
	public InitPositionCommandElements getInitPositionCommandAccess() {
		return (pInitPositionCommand != null) ? pInitPositionCommand : (pInitPositionCommand = new InitPositionCommandElements());
	}
	
	public ParserRule getInitPositionCommandRule() {
		return getInitPositionCommandAccess().getRule();
	}

	//InitHeadingCommand:
	//	"heading" heading=HeadingKind ";";
	public InitHeadingCommandElements getInitHeadingCommandAccess() {
		return (pInitHeadingCommand != null) ? pInitHeadingCommand : (pInitHeadingCommand = new InitHeadingCommandElements());
	}
	
	public ParserRule getInitHeadingCommandRule() {
		return getInitHeadingCommandAccess().getRule();
	}

	//InitBoardSizeCommand:
	//	"boardSize" width=INT "," height=INT ";";
	public InitBoardSizeCommandElements getInitBoardSizeCommandAccess() {
		return (pInitBoardSizeCommand != null) ? pInitBoardSizeCommand : (pInitBoardSizeCommand = new InitBoardSizeCommandElements());
	}
	
	public ParserRule getInitBoardSizeCommandRule() {
		return getInitBoardSizeCommandAccess().getRule();
	}

	//enum HeadingKind:
	//	NORTH | SOUTH | WEST | EAST;
	public HeadingKindElements getHeadingKindAccess() {
		return (unknownRuleHeadingKind != null) ? unknownRuleHeadingKind : (unknownRuleHeadingKind = new HeadingKindElements());
	}
	
	public EnumRule getHeadingKindRule() {
		return getHeadingKindAccess().getRule();
	}

	//UserDefinedCommand:
	//	doc=DocumentationComment? "DEFINE COMMAND" name=ID "AS" "BEGIN" statements+=Statement* "END";
	public UserDefinedCommandElements getUserDefinedCommandAccess() {
		return (pUserDefinedCommand != null) ? pUserDefinedCommand : (pUserDefinedCommand = new UserDefinedCommandElements());
	}
	
	public ParserRule getUserDefinedCommandRule() {
		return getUserDefinedCommandAccess().getRule();
	}

	//Main:
	//	{Main} "BEGIN-MAIN" statements+=Statement* "END-MAIN";
	public MainElements getMainAccess() {
		return (pMain != null) ? pMain : (pMain = new MainElements());
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	//Statement:
	//	IfStatement | IterateStatement | WhileStatement | CommandStatement | UserDefinedCommandStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//UserDefinedCommandStatement:
	//	command=[UserDefinedCommand] ";";
	public UserDefinedCommandStatementElements getUserDefinedCommandStatementAccess() {
		return (pUserDefinedCommandStatement != null) ? pUserDefinedCommandStatement : (pUserDefinedCommandStatement = new UserDefinedCommandStatementElements());
	}
	
	public ParserRule getUserDefinedCommandStatementRule() {
		return getUserDefinedCommandStatementAccess().getRule();
	}

	//IfStatement:
	//	"IF" "(" condition=ConditionExpr ")" "{" statements+=Statement* "}" ("ELSE" "{" elseStatements+=Statement* "}")?;
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//IterateStatement:
	//	"ITERATE" times=INT "TIMES" "{" statements+=Statement "}";
	public IterateStatementElements getIterateStatementAccess() {
		return (pIterateStatement != null) ? pIterateStatement : (pIterateStatement = new IterateStatementElements());
	}
	
	public ParserRule getIterateStatementRule() {
		return getIterateStatementAccess().getRule();
	}

	//WhileStatement:
	//	"WHILE" "(" condition=ConditionExpr ")" "{" statements+=Statement "}";
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//DocumentationComment:
	//	"@(" text=STRING ")";
	public DocumentationCommentElements getDocumentationCommentAccess() {
		return (pDocumentationComment != null) ? pDocumentationComment : (pDocumentationComment = new DocumentationCommentElements());
	}
	
	public ParserRule getDocumentationCommentRule() {
		return getDocumentationCommentAccess().getRule();
	}

	//CommandStatement:
	//	kind=CommandKind ";";
	public CommandStatementElements getCommandStatementAccess() {
		return (pCommandStatement != null) ? pCommandStatement : (pCommandStatement = new CommandStatementElements());
	}
	
	public ParserRule getCommandStatementRule() {
		return getCommandStatementAccess().getRule();
	}

	//enum CommandKind:
	//	MOVE="move" | TURNLEFT="turn" | TURNON="turnOn" | TURNOFF="turnOff" | PUT="put" | GET="get";
	public CommandKindElements getCommandKindAccess() {
		return (unknownRuleCommandKind != null) ? unknownRuleCommandKind : (unknownRuleCommandKind = new CommandKindElements());
	}
	
	public EnumRule getCommandKindRule() {
		return getCommandKindAccess().getRule();
	}

	//ConditionExpr:
	//	negation?="!" expr=ConditionKind;
	public ConditionExprElements getConditionExprAccess() {
		return (pConditionExpr != null) ? pConditionExpr : (pConditionExpr = new ConditionExprElements());
	}
	
	public ParserRule getConditionExprRule() {
		return getConditionExprAccess().getRule();
	}

	//enum ConditionKind:
	//	WALL_AHEAD | MARKED_PLACE;
	public ConditionKindElements getConditionKindAccess() {
		return (unknownRuleConditionKind != null) ? unknownRuleConditionKind : (unknownRuleConditionKind = new ConditionKindElements());
	}
	
	public EnumRule getConditionKindRule() {
		return getConditionKindAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
