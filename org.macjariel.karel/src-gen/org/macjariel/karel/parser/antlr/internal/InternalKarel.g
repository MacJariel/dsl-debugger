/*
* generated by Xtext
*/
grammar InternalKarel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.macjariel.karel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.macjariel.karel.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.macjariel.karel.services.KarelGrammarAccess;

}

@parser::members {

 	private KarelGrammarAccess grammarAccess;
 	
    public InternalKarelParser(TokenStream input, IAstFactory factory, KarelGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/macjariel/karel/parser/antlr/internal/InternalKarel.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected KarelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProgramRule(), currentNode); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'BEGIN-PROGRAM' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getBEGINPROGRAMKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getInitSectionInitSectionParserRuleCall_1_0(), currentNode); 
	    }
		lv_initSection_1_0=ruleInitSection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initSection",
	        		lv_initSection_1_0, 
	        		"InitSection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getUserDefinedCommandsUserDefinedCommandParserRuleCall_2_0(), currentNode); 
	    }
		lv_userDefinedCommands_2_0=ruleUserDefinedCommand		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"userDefinedCommands",
	        		lv_userDefinedCommands_2_0, 
	        		"UserDefinedCommand", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getMainMainParserRuleCall_3_0(), currentNode); 
	    }
		lv_main_3_0=ruleMain		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"main",
	        		lv_main_3_0, 
	        		"Main", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'END-PROGRAM' 
    {
        createLeafNode(grammarAccess.getProgramAccess().getENDPROGRAMKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleInitSection
entryRuleInitSection returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitSectionRule(), currentNode); }
	 iv_ruleInitSection=ruleInitSection 
	 { $current=$iv_ruleInitSection.current; } 
	 EOF 
;

// Rule InitSection
ruleInitSection returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'BEGIN-INIT' 
    {
        createLeafNode(grammarAccess.getInitSectionAccess().getBEGININITKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitSectionAccess().getInitCommandsInitCommandParserRuleCall_1_0(), currentNode); 
	    }
		lv_initCommands_1_0=ruleInitCommand		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitSectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"initCommands",
	        		lv_initCommands_1_0, 
	        		"InitCommand", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'END-INIT' 
    {
        createLeafNode(grammarAccess.getInitSectionAccess().getENDINITKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleInitCommand
entryRuleInitCommand returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitCommandRule(), currentNode); }
	 iv_ruleInitCommand=ruleInitCommand 
	 { $current=$iv_ruleInitCommand.current; } 
	 EOF 
;

// Rule InitCommand
ruleInitCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getInitCommandAccess().getInitPositionCommandParserRuleCall_0(), currentNode); 
    }
    this_InitPositionCommand_0=ruleInitPositionCommand
    { 
        $current = $this_InitPositionCommand_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInitCommandAccess().getInitHeadingCommandParserRuleCall_1(), currentNode); 
    }
    this_InitHeadingCommand_1=ruleInitHeadingCommand
    { 
        $current = $this_InitHeadingCommand_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getInitCommandAccess().getInitBoardSizeCommandParserRuleCall_2(), currentNode); 
    }
    this_InitBoardSizeCommand_2=ruleInitBoardSizeCommand
    { 
        $current = $this_InitBoardSizeCommand_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInitPositionCommand
entryRuleInitPositionCommand returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitPositionCommandRule(), currentNode); }
	 iv_ruleInitPositionCommand=ruleInitPositionCommand 
	 { $current=$iv_ruleInitPositionCommand.current; } 
	 EOF 
;

// Rule InitPositionCommand
ruleInitPositionCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'position' 
    {
        createLeafNode(grammarAccess.getInitPositionCommandAccess().getPositionKeyword_0(), null); 
    }
(
(
		lv_x_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getInitPositionCommandAccess().getXINTTerminalRuleCall_1_0(), "x"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitPositionCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"x",
	        		lv_x_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getInitPositionCommandAccess().getCommaKeyword_2(), null); 
    }
(
(
		lv_y_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getInitPositionCommandAccess().getYINTTerminalRuleCall_3_0(), "y"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitPositionCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"y",
	        		lv_y_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getInitPositionCommandAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleInitHeadingCommand
entryRuleInitHeadingCommand returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitHeadingCommandRule(), currentNode); }
	 iv_ruleInitHeadingCommand=ruleInitHeadingCommand 
	 { $current=$iv_ruleInitHeadingCommand.current; } 
	 EOF 
;

// Rule InitHeadingCommand
ruleInitHeadingCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'heading' 
    {
        createLeafNode(grammarAccess.getInitHeadingCommandAccess().getHeadingKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitHeadingCommandAccess().getHeadingHeadingKindEnumRuleCall_1_0(), currentNode); 
	    }
		lv_heading_1_0=ruleHeadingKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitHeadingCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"heading",
	        		lv_heading_1_0, 
	        		"HeadingKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getInitHeadingCommandAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleInitBoardSizeCommand
entryRuleInitBoardSizeCommand returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitBoardSizeCommandRule(), currentNode); }
	 iv_ruleInitBoardSizeCommand=ruleInitBoardSizeCommand 
	 { $current=$iv_ruleInitBoardSizeCommand.current; } 
	 EOF 
;

// Rule InitBoardSizeCommand
ruleInitBoardSizeCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'boardSize' 
    {
        createLeafNode(grammarAccess.getInitBoardSizeCommandAccess().getBoardSizeKeyword_0(), null); 
    }
(
(
		lv_width_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getInitBoardSizeCommandAccess().getWidthINTTerminalRuleCall_1_0(), "width"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitBoardSizeCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"width",
	        		lv_width_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getInitBoardSizeCommandAccess().getCommaKeyword_2(), null); 
    }
(
(
		lv_height_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getInitBoardSizeCommandAccess().getHeightINTTerminalRuleCall_3_0(), "height"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitBoardSizeCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"height",
	        		lv_height_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getInitBoardSizeCommandAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleUserDefinedCommand
entryRuleUserDefinedCommand returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUserDefinedCommandRule(), currentNode); }
	 iv_ruleUserDefinedCommand=ruleUserDefinedCommand 
	 { $current=$iv_ruleUserDefinedCommand.current; } 
	 EOF 
;

// Rule UserDefinedCommand
ruleUserDefinedCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUserDefinedCommandAccess().getDocDocumentationCommentParserRuleCall_0_0(), currentNode); 
	    }
		lv_doc_0_0=ruleDocumentationComment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUserDefinedCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"doc",
	        		lv_doc_0_0, 
	        		"DocumentationComment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'DEFINE COMMAND' 
    {
        createLeafNode(grammarAccess.getUserDefinedCommandAccess().getDEFINECOMMANDKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getUserDefinedCommandAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUserDefinedCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'AS' 
    {
        createLeafNode(grammarAccess.getUserDefinedCommandAccess().getASKeyword_3(), null); 
    }
	'BEGIN' 
    {
        createLeafNode(grammarAccess.getUserDefinedCommandAccess().getBEGINKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUserDefinedCommandAccess().getStatementsStatementParserRuleCall_5_0(), currentNode); 
	    }
		lv_statements_5_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUserDefinedCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_5_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'END' 
    {
        createLeafNode(grammarAccess.getUserDefinedCommandAccess().getENDKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleMain
entryRuleMain returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMainRule(), currentNode); }
	 iv_ruleMain=ruleMain 
	 { $current=$iv_ruleMain.current; } 
	 EOF 
;

// Rule Main
ruleMain returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMainAccess().getMainAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMainAccess().getMainAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'BEGIN-MAIN' 
    {
        createLeafNode(grammarAccess.getMainAccess().getBEGINMAINKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMainAccess().getStatementsStatementParserRuleCall_2_0(), currentNode); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMainRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_2_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'END-MAIN' 
    {
        createLeafNode(grammarAccess.getMainAccess().getENDMAINKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0(), currentNode); 
    }
    this_IfStatement_0=ruleIfStatement
    { 
        $current = $this_IfStatement_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getIterateStatementParserRuleCall_1(), currentNode); 
    }
    this_IterateStatement_1=ruleIterateStatement
    { 
        $current = $this_IterateStatement_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2(), currentNode); 
    }
    this_WhileStatement_2=ruleWhileStatement
    { 
        $current = $this_WhileStatement_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getCommandStatementParserRuleCall_3(), currentNode); 
    }
    this_CommandStatement_3=ruleCommandStatement
    { 
        $current = $this_CommandStatement_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getUserDefinedCommandStatementParserRuleCall_4(), currentNode); 
    }
    this_UserDefinedCommandStatement_4=ruleUserDefinedCommandStatement
    { 
        $current = $this_UserDefinedCommandStatement_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleUserDefinedCommandStatement
entryRuleUserDefinedCommandStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUserDefinedCommandStatementRule(), currentNode); }
	 iv_ruleUserDefinedCommandStatement=ruleUserDefinedCommandStatement 
	 { $current=$iv_ruleUserDefinedCommandStatement.current; } 
	 EOF 
;

// Rule UserDefinedCommandStatement
ruleUserDefinedCommandStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getUserDefinedCommandStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getUserDefinedCommandStatementAccess().getCommandUserDefinedCommandCrossReference_0_0(), "command"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getUserDefinedCommandStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfStatementRule(), currentNode); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'IF' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getIFKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getConditionConditionExprParserRuleCall_2_0(), currentNode); 
	    }
		lv_condition_2_0=ruleConditionExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_2_0, 
	        		"ConditionExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_5_0(), currentNode); 
	    }
		lv_statements_5_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_5_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getRightCurlyBracketKeyword_6(), null); 
    }
(	'ELSE' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getELSEKeyword_7_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getLeftCurlyBracketKeyword_7_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementsStatementParserRuleCall_7_2_0(), currentNode); 
	    }
		lv_elseStatements_9_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elseStatements",
	        		lv_elseStatements_9_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getRightCurlyBracketKeyword_7_3(), null); 
    }
)?)
;





// Entry rule entryRuleIterateStatement
entryRuleIterateStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIterateStatementRule(), currentNode); }
	 iv_ruleIterateStatement=ruleIterateStatement 
	 { $current=$iv_ruleIterateStatement.current; } 
	 EOF 
;

// Rule IterateStatement
ruleIterateStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'ITERATE' 
    {
        createLeafNode(grammarAccess.getIterateStatementAccess().getITERATEKeyword_0(), null); 
    }
(
(
		lv_times_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIterateStatementAccess().getTimesINTTerminalRuleCall_1_0(), "times"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIterateStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"times",
	        		lv_times_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'TIMES' 
    {
        createLeafNode(grammarAccess.getIterateStatementAccess().getTIMESKeyword_2(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getIterateStatementAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIterateStatementAccess().getStatementsStatementParserRuleCall_4_0(), currentNode); 
	    }
		lv_statements_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIterateStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_4_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getIterateStatementAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhileStatementRule(), currentNode); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'WHILE' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getWHILEKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getConditionConditionExprParserRuleCall_2_0(), currentNode); 
	    }
		lv_condition_2_0=ruleConditionExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_2_0, 
	        		"ConditionExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getStatementsStatementParserRuleCall_5_0(), currentNode); 
	    }
		lv_statements_5_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_5_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleDocumentationComment
entryRuleDocumentationComment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDocumentationCommentRule(), currentNode); }
	 iv_ruleDocumentationComment=ruleDocumentationComment 
	 { $current=$iv_ruleDocumentationComment.current; } 
	 EOF 
;

// Rule DocumentationComment
ruleDocumentationComment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'@(' 
    {
        createLeafNode(grammarAccess.getDocumentationCommentAccess().getCommercialAtLeftParenthesisKeyword_0(), null); 
    }
(
(
		lv_text_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDocumentationCommentAccess().getTextSTRINGTerminalRuleCall_1_0(), "text"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentationCommentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"text",
	        		lv_text_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getDocumentationCommentAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleCommandStatement
entryRuleCommandStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommandStatementRule(), currentNode); }
	 iv_ruleCommandStatement=ruleCommandStatement 
	 { $current=$iv_ruleCommandStatement.current; } 
	 EOF 
;

// Rule CommandStatement
ruleCommandStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCommandStatementAccess().getKindCommandKindEnumRuleCall_0_0(), currentNode); 
	    }
		lv_kind_0_0=ruleCommandKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_0_0, 
	        		"CommandKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getCommandStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleConditionExpr
entryRuleConditionExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionExprRule(), currentNode); }
	 iv_ruleConditionExpr=ruleConditionExpr 
	 { $current=$iv_ruleConditionExpr.current; } 
	 EOF 
;

// Rule ConditionExpr
ruleConditionExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_negation_0_0=	'!' 
    {
        createLeafNode(grammarAccess.getConditionExprAccess().getNegationExclamationMarkKeyword_0_0(), "negation"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "negation", true, "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionExprAccess().getExprConditionKindEnumRuleCall_1_0(), currentNode); 
	    }
		lv_expr_1_0=ruleConditionKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_1_0, 
	        		"ConditionKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Rule HeadingKind
ruleHeadingKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'NORTH' 
	{
        $current = grammarAccess.getHeadingKindAccess().getNORTHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getHeadingKindAccess().getNORTHEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'SOUTH' 
	{
        $current = grammarAccess.getHeadingKindAccess().getSOUTHEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getHeadingKindAccess().getSOUTHEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'WEST' 
	{
        $current = grammarAccess.getHeadingKindAccess().getWESTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getHeadingKindAccess().getWESTEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'EAST' 
	{
        $current = grammarAccess.getHeadingKindAccess().getEASTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getHeadingKindAccess().getEASTEnumLiteralDeclaration_3(), null); 
    }
));



// Rule CommandKind
ruleCommandKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'move' 
	{
        $current = grammarAccess.getCommandKindAccess().getMOVEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCommandKindAccess().getMOVEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'turn' 
	{
        $current = grammarAccess.getCommandKindAccess().getTURNLEFTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCommandKindAccess().getTURNLEFTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'turnOn' 
	{
        $current = grammarAccess.getCommandKindAccess().getTURNONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCommandKindAccess().getTURNONEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'turnOff' 
	{
        $current = grammarAccess.getCommandKindAccess().getTURNOFFEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCommandKindAccess().getTURNOFFEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'put' 
	{
        $current = grammarAccess.getCommandKindAccess().getPUTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCommandKindAccess().getPUTEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'get' 
	{
        $current = grammarAccess.getCommandKindAccess().getGETEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCommandKindAccess().getGETEnumLiteralDeclaration_5(), null); 
    }
));



// Rule ConditionKind
ruleConditionKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'WALL_AHEAD' 
	{
        $current = grammarAccess.getConditionKindAccess().getWALL_AHEADEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getConditionKindAccess().getWALL_AHEADEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'MARKED_PLACE' 
	{
        $current = grammarAccess.getConditionKindAccess().getMARKED_PLACEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getConditionKindAccess().getMARKED_PLACEEnumLiteralDeclaration_1(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


